package players

import (
	"fmt"
	ui "github.com/axzilla/templui/pkg/components"
	"github.com/henrriusdev/hangrite/components"
	"github.com/henrriusdev/hangrite/models"
)

templ List(players []models.Player, user *models.CurrentUser) {
	@components.Layout("Peloteros", user) {
		<div class="container mx-auto">
			<div class="flex justify-between items-center mb-6">
				<h1 class="text-2xl font-bold">Peloteros</h1>
				<a href="/players/new" class="bg-primary text-primary-foreground px-4 py-2 rounded hover:bg-primary/90">
					Nuevo Pelotero
				</a>
			</div>
			<div class="bg-card rounded-lg shadow">
				<table class="min-w-full">
					<thead class="bg-muted">
						<tr>
							<th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Nombre</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Cédula</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Posición</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Fecha de Entrada</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Acciones</th>
						</tr>
					</thead>
					<tbody class="divide-y divide-muted">
						for _, player := range players {
							<tr data-id={ fmt.Sprint(player.ID) }>
								<td class="px-6 py-4 whitespace-nowrap">{ player.Name }</td>
								<td class="px-6 py-4 whitespace-nowrap">{ player.IDNumber }</td>
								<td class="px-6 py-4 whitespace-nowrap">{ player.Position }</td>
								<td class="px-6 py-4 whitespace-nowrap">{ player.EntryDate.Format("02/01/2006") }</td>
								<td class="px-6 py-4 whitespace-nowrap space-x-2">
									<a href={ templ.SafeURL(fmt.Sprintf("/players/%d/edit", player.ID)) } class="text-blue-600 hover:text-blue-900">
										Editar
									</a>
									<button
										type="button"
										class="text-primary hover:text-primary/90"
										onclick={ showCertificateModal(fmt.Sprint(player.ID)) }
									>
										Generar Constancia
									</button>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
			<!-- Modal for Certificate Generation -->
			<div id="certificateModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
				<div class="bg-background p-6 rounded-lg shadow-lg w-96">
					<h2 class="text-xl font-bold mb-4">Generar Constancia</h2>
					<form id="certificateForm" method="POST" action="/certificates/generate" class="space-y-4" onsubmit={ handleCertificateSubmit() }>
						<input type="hidden" id="playerID" name="player_id"/>
						@ui.FormItem(ui.FormItemProps{}) {
							@ui.FormLabel(ui.FormLabelProps{
								For:  "start_time",
								Text: "Horario Comprendido de entrenamiento",
							})
							<div class="flex items-center space-x-2">
								@ui.Input(ui.InputProps{
									Type:        ui.InputTypeText,
									ID:          "start_time",
									Name:        "start_time",
									Placeholder: "Ej: 6 A.M.",
								})
								<span class="text-sm">hasta la/las</span>
								@ui.Input(ui.InputProps{
									Type:        ui.InputTypeText,
									ID:          "end_time",
									Name:        "end_time",
									Placeholder: "Ej: 3 P.M.",
								})
							</div>
						}
						<div class="flex justify-end space-x-2">
							<button type="button" onclick={ hideCertificateModal() } class="bg-muted text-muted-foreground px-4 py-2 rounded hover:bg-muted/90">
								Cancelar
							</button>
							<button type="submit" class="bg-primary text-primary-foreground px-4 py-2 rounded hover:bg-primary/90">
								Generar
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	}
}

script showCertificateModal(playerID string) {
	console.log('Setting player ID:', playerID);
	document.getElementById('certificateModal').classList.remove('hidden');
	document.getElementById('playerID').value = playerID;
}

script hideCertificateModal() {
	document.getElementById('certificateModal').classList.add('hidden');
}

script handleCertificateSubmit() {
	event.preventDefault();
	const form = event.target;
	const formData = new FormData(form);
	
	// Combine start and end times into training_hours format
	const startTime = formData.get('start_time');
	const endTime = formData.get('end_time');
	
	// Determine whether to use 'la' or 'las' based on end time
	const isOnePM = endTime.toUpperCase().trim() === "1 P.M." || 
	                endTime.toUpperCase().trim() === "1 PM" || 
	                endTime.toUpperCase().trim() === "1:00 P.M." || 
	                endTime.toUpperCase().trim() === "1:00 PM";
	
	console.log('End time:', endTime);
	console.log('Is 1 PM?:', isOnePM);
	
	const article = isOnePM ? "la" : "las";
	console.log('Using article:', article);
	
	formData.delete('start_time');
	formData.delete('end_time');
	formData.append('training_hours', `${startTime} hasta ${article} ${endTime}`);
	
	// Convert FormData to URLSearchParams
	const params = new URLSearchParams();
	for (let [key, value] of formData.entries()) {
		params.append(key, value);
	}
	
	// Log form data for debugging
	console.log('Form data:');
	for (let [key, value] of params.entries()) {
		console.log(key + ': ' + value);
	}
	
	fetch(form.action, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/x-www-form-urlencoded',
			'X-Requested-With': 'XMLHttpRequest'
		},
		credentials: 'same-origin',
		body: params.toString()
	}).then(response => {
		if (response.ok) {
			return response.text();
		} else {
			return response.text().then(text => {
				console.log('Error response:', text);
				throw new Error('Error al generar la constancia: ' + text);
			});
		}
	}).then(html => {
		// Open certificate in new window
		const certificateWindow = window.open('', '_blank');
		certificateWindow.document.write(html);
		certificateWindow.document.close();
	}).catch(error => {
		console.error('Error:', error);
		alert(error.message);
	});
}
